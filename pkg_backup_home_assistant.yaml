#################################################################
#                                                               #
#                     Packages/HA Backup                        #
#                                                               #
#################################################################

#################################################################
#                                                               #
#                          Customize                            #
#                                                               #
#################################################################
homeassistant:
  customize:
    package.ha_backup:
      version: "1.0.0"
      date: ðŸ“… 30/06/2023 - Updated 30/06/2023
      info: https://github.com/USER/REPO/readme.md
      customize: &customize
         package: "Home Assistant Backup by Paolo ï£¿"
#########################################################
# BACKUP FOLDER:
      key: &bk_folder
        /share/backup_on_miniserver   
#########################################################
    input_number.ritardo_backup_check:
      <<: *customize
      friendly_name: Ritardo Controllo Backup (min)
      icon: mdi:timer-sand
    sensor.latest_backup:
      <<: *customize
      friendly_name: Ultimo Backup
      icon: mdi:backup-restore    
    automation.ha_backup_run:
      friendly_name: Esegui Backup
      icon: :mdi:cloud-upload
      <<: *customize
      
#########################################################
#                                                       #
#                       GROUP                           #
#                                                       #
#########################################################
group:
  home_assistant_backup_pack:
    name: Home Assistant Backup Pack
    entities:
      - input_boolean.auto_backup
      - input_boolean.execute_backup
      - input_select.backup_day
      - input_datetime.backup_time
      - input_text.backup_status
      - input_number.ritardo_backup_check
      - automation.ha_backup_run

#########################################################
#                                                       #
#                        Input                          #
#                                                       #
#########################################################
# Selettore per abilitare il backup automatico
input_boolean:
  auto_backup:
    name: Backup Automatico
    initial: on
    icon: mdi:cloud-upload

#########################################################
# Pulsante per esguire il backup manualmente
input_button:
  execute_backup:
    name: Crea Backup
    icon: mdi:backup-restore

#########################################################
# Input per scegliere i giorni in cui eseguire il backup automatico
input_select:
  backup_day:
    name: Giorno di Backup
    options:
      - "Tutti i giorni"
      - "Lun - Mer - Ven"
      - "Lun e Ven"
      - "Sabato"
      - "Domenica"
      - "Mai"
    initial: "Lun e Ven"
    icon: mdi:calendar

#########################################################
# Input per l'orario di pianificazione del backup automatico
input_datetime:
  backup_time:
    name: Orario Backup
    has_date: false
    has_time: true
    initial: "23:30"

#########################################################
# Indicatore dello stato di backup
input_text:
  backup_status:
    icon: mdi:database-check
    name: Stato Backup
    initial: Normale

#########################################################
# Selettore per scegliere la durata dell'attesa per il backup check
input_number:
 ritardo_backup_check:
    initial: 60
    min: 15
    max: 180
    step: 15

#########################################################
#                                                       #
#                     Automazioni                       #
#                                                       #
#########################################################
automation:
  - alias: ha_backup_run
    trigger:
      - platform: state
        entity_id: input_button.execute_backup
        id: backup_manuale
      - platform: template
        value_template: >-
          {{ states('sensor.time') == (states.input_datetime.backup_time.attributes.timestamp | int | timestamp_custom('%H:%M', False)) }}
        id: backup_automatico
    condition:
      - condition: or
        conditions:
          - condition: and
            conditions:
              - condition: state
                entity_id: input_boolean.auto_backup
                state: "on"
              - condition: template
                value_template: >-
                  {% set today = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'][now().weekday()] %}
                  {% if is_state("input_select.backup_day", "Tutti i giorni") %} true
                  {% elif (is_state("input_select.backup_day", "Lun e Ven") and today in ["Monday","Friday"]) %} true
                  {% elif is_state("input_select.backup_day", "Sabato") and today in ["Saturday"] %} true
                  {% elif is_state("input_select.backup_day", "Domenica") and today in ["Sunday"] %} true
                  {% elif is_state("input_select.backup_day", "Lun - Mer - Ven") and today in ["Monday","Wednesday","Friday"] %} true
                  {% else %} false
                  {% endif %}
              - condition: trigger
                id: backup_automatico
          - condition: trigger
            id: backup_manuale
    action:
      - service: input_text.set_value
        data_template:
          entity_id: input_text.backup_status
          value: Avviato Backup alle {{states('sensor.time')}}
      - service: hassio.backup_full
        data_template:
          name: Backup {{ now().strftime('%Y-%m-%d') }}
      - wait_for_trigger:
          - platform: event
            event_type: folder_watcher
            event_data:
              event_type: closed
              folder: *bk_folder
        timeout:
          minutes: "{{ states('input_number.ritardo_backup_check') | int(0) }}"
        continue_on_timeout: true
      - alias: check backup
        if: "{{ wait.remaining != 0 }}"
        then:
          - service: input_text.set_value
            data_template:
              entity_id: input_text.backup_status
              value: Ultimo Backup {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }} alle {{states('sensor.time')}}
          - service: notify.pushover_hassio
            data:
              message: |
                Backup Completato
                {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }}
              title: Home Assistant
              data:
                sound: pinnabor
                priority: 0
          - service: persistent_notification.create
            data:
              message: |
                Backup Completato
                {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }} alle {{states('sensor.time')}}
              title: Home Assistant Backup
              notification_id: backup_persistant_notification
          - delay: '02:00:00'
          - service: input_text.set_value
            data_template:
              entity_id: input_text.backup_status
              value: Normale
        else:
          - service: input_text.set_value
            data_template:
              entity_id: input_text.backup_status
              value: Backup Fallito!
          - service: notify.pushover_hassio
            data:
              message: |
                Creazione Backup fallita!
              title: Home Assistant
              data:
                sound: pinnabor
                priority: 1
          - service: persistent_notification.create
            data:
              message: |
                Creazione Backup fallita!
                {{ now().timestamp() | timestamp_custom('%Y-%m-%d') }}
              title: Home Assistant Backup
              notification_id: backup_persistant_notification
                
                
                